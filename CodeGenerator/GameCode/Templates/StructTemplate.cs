// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CodeGenerator.GameCode.Templates
{
    using Schema;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\StructTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class StructTemplate : StructTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 1 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\GeneratedCodeWarning.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("//-------------------------------------------------------------------------------"));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 2 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\GeneratedCodeWarning.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("//                                                                               "));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 3 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\GeneratedCodeWarning.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("//    This code was automatically generated.                                     "));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 4 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\GeneratedCodeWarning.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("//    Changes to this file may cause incorrect behavior and will be lost if      "));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 5 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\GeneratedCodeWarning.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("//    the code is regenerated.                                                   "));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 6 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\GeneratedCodeWarning.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("//                                                                               "));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 7 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\GeneratedCodeWarning.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("//-------------------------------------------------------------------------------"));
            
            #line default
            #line hidden
            this.Write("\r\n");
            this.Write("\r\nusing ");
            
            #line 6 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\StructTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Utils.RootNamespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 6 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\StructTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Utils.UtilsNamespace));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\nnamespace ");
            
            #line 8 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\StructTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Utils.RootNamespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 8 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\StructTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Utils.ClassesNamespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n\tpublic readonly struct ");
            
            #line 10 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\StructTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ObjectData.name));
            
            #line default
            #line hidden
            this.Write("\r\n\t{\r\n");
            
            #line 12 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\StructTemplate.tt"

		PushIndent("\t\t");
		foreach (var item in ObjectData.members)
			WriteClassMember(item, Schema, true);
		PopIndent();

            
            #line default
            #line hidden
            this.Write("\r\n\t\tpublic ");
            
            #line 19 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\StructTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ObjectData.name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 19 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\StructTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Utils.CallbackInterface));
            
            #line default
            #line hidden
            this.Write(" parent)\r\n\t\t{\r\n");
            
            #line 21 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\StructTemplate.tt"

			PushIndent("\t\t\t");
			foreach (var item in ObjectData.members)
				WriteInitializer(item, Schema, true);
			PopIndent();

            
            #line default
            #line hidden
            this.Write("\t\t}\r\n\r\n\t\tpublic ");
            
            #line 29 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\StructTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ObjectData.name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 29 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\StructTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Utils.ReaderInterface));
            
            #line default
            #line hidden
            this.Write(" reader, ");
            
            #line 29 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\StructTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Utils.CallbackInterface));
            
            #line default
            #line hidden
            this.Write(" parent)\r\n\t\t{\r\n");
            
            #line 31 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\StructTemplate.tt"

			PushIndent("\t\t\t");
			foreach (var item in ObjectData.members)
				WriteDeserializationCode(item, Schema, true);
			PopIndent();

            
            #line default
            #line hidden
            this.Write("\t\t}\r\n\r\n");
            
            #line 39 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\StructTemplate.tt"

		PushIndent("\t\t");
		foreach (var item in ObjectData.members)
			WriteProperty(item, Schema, true);
		PopIndent();

            
            #line default
            #line hidden
            this.Write("\r\n\t\tpublic void Serialize(");
            
            #line 46 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\StructTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Utils.WriterInterface));
            
            #line default
            #line hidden
            this.Write(" writer)\r\n\t\t{\r\n");
            
            #line 48 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\StructTemplate.tt"

			PushIndent("\t\t\t");
			foreach (var item in ObjectData.members)
				WriteSerializationCode(item, Schema);
			PopIndent();

            
            #line default
            #line hidden
            this.Write("\t\t}\r\n\t}\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 2 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\UtilsClassMember.tt"


private string ConvertType(string type, DataSchema schema)
{
	if (type == Constants.TypeInt)
	{
		return "int";
	}
	else if (type == Constants.TypeLong)
	{
		return "long";
	}
	else if (type == Constants.TypeShort)
	{
		return "short";
	}
	else if (type == Constants.TypeSbyte)
	{
		return "sbyte";
	}
	else if (type == Constants.TypeByte)
	{
		return "byte";
	}
	else if (type == Constants.TypeFloat)
	{
		return "float";
	}
	else if (type == Constants.TypeBool)
	{
		return "bool";
	}
	else if (type == Constants.TypeString)
	{
		return "string";
	}
	else if (schema.HasObject(type))
	{
		return type;
	}
	else if (schema.HasStruct(type))
	{
		return type;
	}
	else
	{
		throw new InvalidSchemaException("Invalid type - " + type);
	}
}

private void WriteProperty(XmlClassMember member, DataSchema schema, bool readOnly)
{
	var propertyName = Utils.PropertyName(member.name);
	var memberName = Utils.PrivateMemberName(member.name);

	if (member.type == Constants.TypeMap)
	{
		WriteLine($"public {Utils.MapType}<{ConvertType(member.key, schema)}, {ConvertType(member.value, schema)}> {propertyName} => {memberName};");
	}
	else if (member.type == Constants.TypeSet)
	{
		WriteLine($"public {Utils.SetType}<{ConvertType(member.value, schema)}> {propertyName} => {memberName};");
	}
	else if (member.type == Constants.TypeList)
	{
		WriteLine($"public {Utils.ListType}<{ConvertType(member.value, schema)}> {propertyName} => {memberName};");
	}
	else if (schema.HasObject(member.type))
	{
		WriteLine($"public {ConvertType(member.type, schema)} {propertyName} => {memberName};");
	}
	else if (readOnly)
	{
		WriteLine($"public {ConvertType(member.type, schema)} {propertyName} => {memberName};");
	}
	else
	{
		WriteLine($"public {ConvertType(member.type, schema)} {propertyName}");
		WriteLine("{");
		PushIndent("\t");
		WriteLine($"get => {memberName};");
		WriteLine("set");
		WriteLine("{");
		PushIndent("\t");
		WriteLine($"if ({memberName} == value) return;");
		WriteLine($"{memberName} = value;");
		WriteLine(Utils.CallbackMethod + "();");
		PopIndent();
		WriteLine("}");
		PopIndent();
		WriteLine("}");
	}
}

private void WriteInitializer(XmlClassMember member, DataSchema schema, bool readOnly)
{
	var memberName = Utils.PrivateMemberName(member.name);
	var callback = readOnly ? "parent" : "this";

	if (member.type == Constants.TypeMap)
	{
		WriteLine($"{memberName} = new {Utils.MapType}<{ConvertType(member.key, schema)}, {ConvertType(member.value, schema)}>({callback});");
	}
	else if (member.type == Constants.TypeSet)
	{
		WriteLine($"{memberName} = new {Utils.SetType}<{ConvertType(member.value, schema)}>({callback});");
	}
	else if (member.type == Constants.TypeList)
	{
		WriteLine($"{memberName} = new {Utils.ListType}<{ConvertType(member.value, schema)}>({callback});");
	}
	else if (schema.HasObject(member.type))
	{
		WriteLine($"{memberName} = new {member.type}({callback});");
	}
	else if (schema.HasStruct(member.type))
	{
		WriteLine($"{memberName} = new {member.type}({callback});");
	}
	else
	{
		WriteLine($"{memberName} = default({ConvertType(member.type, schema)});");
	}
}

private void WriteClassMember(XmlClassMember member, DataSchema schema, bool readOnly)
{
	var memberName = Utils.PrivateMemberName(member.name);
	var prefix = readOnly ? "private readonly " : "private ";
	var suffix = ";";

	string memberType;
	if (member.type == Constants.TypeMap)
	{
		memberType = $"{Utils.MapType}<{ConvertType(member.key, schema)}, {ConvertType(member.value, schema)}>";
	}
	else if (member.type == Constants.TypeSet)
	{
		memberType = $"{Utils.SetType}<{ConvertType(member.value, schema)}>";
	}
	else if (member.type == Constants.TypeList)
	{
		memberType = $"{Utils.ListType}<{ConvertType(member.value, schema)}>";
	}
	else
	{
		memberType = ConvertType(member.type, schema);
	}

	WriteLine(prefix + memberType + " " + memberName + suffix);
}


        
        #line default
        #line hidden
        
        #line 2 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\UtilsSerializationCode.tt"


private void WriteSerializationCode(XmlClassMember member, DataSchema schema)
{
	var memberName = Utils.PrivateMemberName(member.name);
	if (member.type == Constants.TypeList)
	{
		WriteLine($"writer.WriteInt({memberName}.Count);");
		WriteLine($"for (int i = 0; i < {memberName}.Count; ++i)");
		WriteLine("{");
		PushIndent("\t");
		WriteSerializationCode($"{memberName}[i]", member.value, schema);
		PopIndent();
		WriteLine("}");
	}
	else if (member.type == Constants.TypeMap)
	{
		WriteLine($"writer.WriteInt({memberName}.Count);");
		WriteLine($"foreach (var item in {memberName}.Items)");
		WriteLine("{");
		PushIndent("\t");
		WriteSerializationCode("item.Key", member.key, schema);
		WriteSerializationCode("item.Value", member.value, schema);
		PopIndent();
		WriteLine("}");
	}
	else if (member.type == Constants.TypeSet)
	{
		WriteLine($"writer.WriteInt({memberName}.Count);");
		WriteLine($"foreach (var item in {memberName}.Items)");
		WriteLine("{");
		PushIndent("\t");
		WriteSerializationCode("item", member.value, schema);
		PopIndent();
		WriteLine("}");
	}
	else
	{
		WriteSerializationCode(memberName, member.type, schema);
	}
}

private void WriteSerializationCode(string memberName, string memberType, DataSchema schema)
{
	if (memberType == Constants.TypeInt)
	{
		WriteLine($"writer.WriteInt({memberName});");
	}
	else if (memberType == Constants.TypeLong)
	{
		WriteLine($"writer.WriteLong({memberName});");
	}
	else if (memberType == Constants.TypeShort)
	{
		WriteLine($"writer.WriteShort({memberName});");
	}
	else if (memberType == Constants.TypeSbyte)
	{
		WriteLine($"writer.WriteSbyte({memberName});");
	}
	else if (memberType == Constants.TypeByte)
	{
		WriteLine($"writer.WriteByte({memberName});");
	}
	else if (memberType == Constants.TypeFloat)
	{
		WriteLine($"writer.WriteFloat({memberName});");
	}
	else if (memberType == Constants.TypeBool)
	{
		WriteLine($"writer.WriteBool({memberName});");
	}
	else if (memberType == Constants.TypeString)
	{
		WriteLine($"writer.WriteString({memberName});");
	}
	else
	{
		WriteLine($"{memberName}.Serialize(writer);");
	}
}

private void WriteDeserializationCode(XmlClassMember member, DataSchema schema, bool readOnly)
{
	var memberName = Utils.PrivateMemberName(member.name);
	var callback = readOnly ? "parent" : "this";

	if (member.type == Constants.TypeList)
	{
		var count = Utils.LocalVariableName(member.name) + "ItemCount";
		WriteLine($"var {count} = reader.ReadInt();");
		WriteLine($"{memberName} = new {Utils.ListType}<{ConvertType(member.value, schema)}>({count}, {callback});");
		WriteLine($"for (int i = 0; i < {count}; ++i)");
		WriteLine("{");
		PushIndent("\t");
		WriteLine($"{ConvertType(member.value, schema)} item;");
		WriteDeserializationCode($"item", member.value, schema, readOnly);
		WriteLine($"{memberName}.Add(item);");
		PopIndent();
		WriteLine("}");
	}
	else if (member.type == Constants.TypeMap)
	{
		var count = Utils.LocalVariableName(member.name) + "ItemCount";
		WriteLine($"var {count} = reader.ReadInt();");
		WriteLine($"{memberName} = new {Utils.MapType}<{ConvertType(member.key, schema)}, {ConvertType(member.value, schema)}>({callback});");
		WriteLine($"for (int i = 0; i < {count}; ++i)");
		WriteLine("{");
		PushIndent("\t");
		WriteLine($"{ConvertType(member.key, schema)} key;");
		WriteLine($"{ConvertType(member.value, schema)} value;");
		WriteDeserializationCode("key", member.key, schema, readOnly);
		WriteDeserializationCode("value", member.value, schema, readOnly);
		WriteLine($"{memberName}.Add(key,value);");
		PopIndent();
		WriteLine("}");
	}
	else if (member.type == Constants.TypeSet)
	{
		var count = Utils.LocalVariableName(member.name) + "ItemCount";
		WriteLine($"var {count} = reader.ReadInt();");
		WriteLine($"{memberName} = new {Utils.SetType}<{ConvertType(member.value, schema)}>({callback});");
		WriteLine($"for (int i = 0; i < {count}; ++i)");
		WriteLine("{");
		PushIndent("\t");
		WriteLine($"{ConvertType(member.value, schema)} item;");
		WriteDeserializationCode("item", member.value, schema, readOnly);
		WriteLine($"{memberName}.Add(item);");
		PopIndent();
		WriteLine("}");
	}
	else
	{
		WriteDeserializationCode(memberName, member.type, schema, readOnly);
	}
}

private void WriteDeserializationCode(string memberName, string memberType, DataSchema schema, bool readOnly)
{
	if (memberType == Constants.TypeInt)
	{
		WriteLine($"{memberName} = reader.ReadInt();");
	}
	else if (memberType == Constants.TypeLong)
	{
		WriteLine($"{memberName} = reader.ReadLong();");
	}
	else if (memberType == Constants.TypeShort)
	{
		WriteLine($"{memberName} = reader.ReadShort();");
	}
	else if (memberType == Constants.TypeSbyte)
	{
		WriteLine($"{memberName} = reader.ReadSbyte();");
	}
	else if (memberType == Constants.TypeByte)
	{
		WriteLine($"{memberName} = reader.ReadByte();");
	}
	else if (memberType == Constants.TypeFloat)
	{
		WriteLine($"{memberName} = reader.ReadFloat();");
	}
	else if (memberType == Constants.TypeBool)
	{
		WriteLine($"{memberName} = reader.ReadBool();");
	}
	else if (memberType == Constants.TypeString)
	{
		WriteLine($"{memberName} = reader.ReadString();");
	}
	else
	{
		var callback = readOnly ? "parent" : "this";
		WriteLine($"{memberName} = new {ConvertType(memberType, schema)}(reader, {callback});");
	}
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class StructTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
