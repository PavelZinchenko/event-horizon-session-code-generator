// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CodeGenerator.GameCode.Templates
{
    using System.Linq;
    using Schema;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class SessionLoaderTemplate : SessionLoaderTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 1 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\GeneratedCodeWarning.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("//-------------------------------------------------------------------------------"));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 2 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\GeneratedCodeWarning.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("//                                                                               "));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 3 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\GeneratedCodeWarning.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("//    This code was automatically generated.                                     "));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 4 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\GeneratedCodeWarning.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("//    Changes to this file may cause incorrect behavior and will be lost if      "));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 5 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\GeneratedCodeWarning.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("//    the code is regenerated.                                                   "));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 6 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\GeneratedCodeWarning.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("//                                                                               "));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 7 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\GeneratedCodeWarning.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("//-------------------------------------------------------------------------------"));
            
            #line default
            #line hidden
            this.Write("\r\n");
            this.Write("\r\nusing ");
            
            #line 6 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Utils.RootNamespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 6 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Utils.UtilsNamespace));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\nnamespace ");
            
            #line 8 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Utils.RootNamespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n\tpublic partial class SessionLoader\r\n\t{\r\n");
            
            #line 12 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"

		PushIndent("\t\t");
		var first = true;
		var oldVersion = new Schema.SchemaVersion();
		foreach (var schemaVersion in VersionList.Items)
		{
			var major = schemaVersion.Major;
			if (!first)
			{
				WriteLine("/// <summary>");
				WriteLine("/// These items must be transferred manually:");
				var oldSchema = Context[oldVersion.Major];
				var newSchema = Context[major];
				var oldData = oldSchema.GetObject(Utils.RootDataClass);
				var newData = newSchema.GetObject(Utils.RootDataClass);
				WriteXmlComments("oldData", "newData", oldData, newData, oldSchema, newSchema);
				WriteLine("/// </summary>");
				WriteLine($"partial void Upgrage_v{oldVersion.Major}_{oldVersion.Minor}_to_v{major}_{0}({Context[oldVersion.Major].GetObjectName(Utils.RootDataClass)} oldData, {Context[major].GetObjectName(Utils.RootDataClass)} newData);");
			}

			for (int i = 0; i < schemaVersion.Minor; ++i)
				WriteLine($"partial void Upgrage_v{major}_{i}_to_v{major}_{i+1}({Context[major].GetObjectName(Utils.RootDataClass)} data);");

			first = false;
			oldVersion = schemaVersion;
		}
		PopIndent();

            
            #line default
            #line hidden
            this.Write("\r\n\t\tpublic ");
            
            #line 41 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.Current.GetObjectName(Utils.RootDataClass)));
            
            #line default
            #line hidden
            this.Write(" Convert(");
            
            #line 41 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context[1].GetObjectName(Utils.RootDataClass)));
            
            #line default
            #line hidden
            this.Write(" data)\r\n\t\t{\r\n");
            
            #line 43 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"

			PushIndent("\t\t\t");
			first = true;
			string name = "data";

			foreach (var schemaVersion in VersionList.Items)
			{
				var major = schemaVersion.Major;
				if (!first)
				{
					var oldname = name;
					name = "data" + major;
					WriteLine($"var {name} = Convert_{oldVersion.Major}_{major}({oldname});");
				}

				for (int i = 0; i < schemaVersion.Minor; ++i)
					WriteLine($"Upgrage_v{major}_{i}_to_v{major}_{i+1}({name});");

				first = false;
				oldVersion = schemaVersion;
			}
			PopIndent();

            
            #line default
            #line hidden
            this.Write("\t\t\treturn ");
            
            #line 66 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t}\r\n\r\n\t\tpublic ");
            
            #line 69 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.Current.GetObjectName(Utils.RootDataClass)));
            
            #line default
            #line hidden
            this.Write(" Load(");
            
            #line 69 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Utils.ReaderClass));
            
            #line default
            #line hidden
            this.Write(" reader, int versionMajor, int versionMinor)\r\n\t\t{\r\n");
            
            #line 71 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"

			first = true;
			name = "data";

			foreach (var schemaVersion in VersionList.Items)
			{
				var major = schemaVersion.Major;
				var oldname = name;
				name = "data" + major;
				if (!first) WriteLine(string.Empty);


            
            #line default
            #line hidden
            this.Write("\t\t\t");
            
            #line 83 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context[major].GetObjectName(Utils.RootDataClass)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 83 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(" = null;\r\n\t\t\tif (versionMajor == ");
            
            #line 84 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(major));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t\t\t");
            
            #line 85 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(" = new ");
            
            #line 85 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context[major].GetObjectName(Utils.RootDataClass)));
            
            #line default
            #line hidden
            this.Write("(reader, null);\r\n");
            
            #line 86 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"

				if (!first)
				{

            
            #line default
            #line hidden
            this.Write("\t\t\telse if (versionMajor == ");
            
            #line 90 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(oldVersion.Major));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t\t{\r\n\t\t\t\t");
            
            #line 92 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(" = Convert_");
            
            #line 92 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(oldVersion.Major));
            
            #line default
            #line hidden
            this.Write("_");
            
            #line 92 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(major));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 92 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(oldname));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t\tversionMajor = ");
            
            #line 93 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(major));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t\tversionMinor = 0;\r\n\t\t\t}\r\n");
            
            #line 96 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"

				}

				if (schemaVersion.Minor > 0)
				{

            
            #line default
            #line hidden
            this.Write("\t\t\tif (versionMajor == ");
            
            #line 102 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(major));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t\t{\r\n");
            
            #line 104 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"

					for (int i = 0; i < schemaVersion.Minor; ++i)
					{

            
            #line default
            #line hidden
            this.Write("\t\t\t\tif (versionMinor == ");
            
            #line 108 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t\t\t{\r\n\t\t\t\t\tUpgrage_v");
            
            #line 110 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(major));
            
            #line default
            #line hidden
            this.Write("_");
            
            #line 110 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write("_to_v");
            
            #line 110 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(major));
            
            #line default
            #line hidden
            this.Write("_");
            
            #line 110 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i+1));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 110 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t\t\tversionMinor = ");
            
            #line 111 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i+1));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t\t}\r\n");
            
            #line 113 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"

					}

            
            #line default
            #line hidden
            this.Write("\t\t\t\t}\r\n");
            
            #line 117 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"

			}

				first = false;
				oldVersion = schemaVersion;
			}

			// if (!IsValidVersion(versionMajor, versionMinor))
			//	throw new System.InvalidOperationException($"invalid data version: {versionMajor}.{versionMinor}");

            
            #line default
            #line hidden
            this.Write("\r\n\t\t\treturn ");
            
            #line 128 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t}\r\n\r\n");
            
            #line 131 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"

		first = true;
		foreach (var schemaVersion in VersionList.Items)
		{
			var major = schemaVersion.Major;
			if (!first)
			{

            
            #line default
            #line hidden
            this.Write("\r\n\t\tprivate ");
            
            #line 140 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context[major].GetObjectName(Utils.RootDataClass)));
            
            #line default
            #line hidden
            this.Write(" Convert_");
            
            #line 140 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(oldVersion.Major));
            
            #line default
            #line hidden
            this.Write("_");
            
            #line 140 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(major));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 140 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context[oldVersion.Major].GetObjectName(Utils.RootDataClass)));
            
            #line default
            #line hidden
            this.Write(" oldData)\r\n\t\t{\r\n\t\t\tvar newData = new ");
            
            #line 142 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context[major].GetObjectName(Utils.RootDataClass)));
            
            #line default
            #line hidden
            this.Write("(null);\r\n");
            
            #line 143 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"

			PushIndent("\t\t\t");
			var oldSchema = Context[oldVersion.Major];
			var newSchema = Context[major];
			var oldData = oldSchema.GetObject(Utils.RootDataClass);
			var newData = newSchema.GetObject(Utils.RootDataClass);
			WriteClonningCode("oldData", "newData", oldData, newData, oldSchema, newSchema);
			PopIndent();

            
            #line default
            #line hidden
            this.Write("\t\t\tUpgrage_v");
            
            #line 152 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(oldVersion.Major));
            
            #line default
            #line hidden
            this.Write("_");
            
            #line 152 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(oldVersion.Minor));
            
            #line default
            #line hidden
            this.Write("_to_v");
            
            #line 152 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(major));
            
            #line default
            #line hidden
            this.Write("_0(oldData, newData);\r\n\t\t\treturn newData;\r\n\t\t}\r\n");
            
            #line 155 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\SessionLoaderTemplate.tt"
			
			}

			first = false;
			oldVersion = schemaVersion;
		}

            
            #line default
            #line hidden
            this.Write("\t}\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 2 "D:\Projects\event-horizon-main\Assets\Modules\GameSession\.CodeGenerator\CodeGenerator\GameCode\Templates\UtilsUpgradeCode.tt"


private void WriteClonningCode(
	string sourceName, 
	string targetName,
	XmlClassItem sourceData,
	XmlClassItem targetData,
	SchemaVersionInfo sourceSchema,
	SchemaVersionInfo targetSchema)
{
	if (sourceData == null || targetData == null) return;

	var sourceMembers = sourceData.members.ToDictionary(item => item.name);
	var targetMembers = targetData.members.ToDictionary(item => item.name);

	foreach (var member in sourceMembers.Values)
	{
		var propertyName = Utils.PropertyName(member.name);
		if (!targetMembers.TryGetValue(member.name, out var targetMember)) 
		{
			// property was removed - {sourceName}.{propertyName};
			continue;
		}

		targetMembers.Remove(member.name);

		if (!Helpers.AreEqual(member, targetMember))
		{
			// type was changed - {propertyName};
			continue;
		}

		if (BuilderContext.AreVersionsEqual(member, targetMember, sourceSchema, targetSchema))
		{
			if (Helpers.IsCollectionType(member.type))
				WriteLine($"{targetName}.{propertyName}.Assign({sourceName}.{propertyName});");
			else
				WriteLine($"{targetName}.{propertyName} = {sourceName}.{propertyName};");

			continue;
		}

		if (targetSchema.HasClass(member.type))
		{
			WriteClonningCode($"{sourceName}.{propertyName}", $"{targetName}.{propertyName}",
				sourceSchema.GetObject(member.type), targetSchema.GetObject(member.type), sourceSchema, targetSchema);
			continue;
		}

		// {targetName}.{propertyName} = {sourceName}.{propertyName};
	}

	foreach (var member in targetMembers.Values)
	{
		var propertyName = Utils.PropertyName(member.name);
		// property was added - {targetName}.{propertyName};
	}
}

private void WriteXmlComments(
	string sourceName, 
	string targetName,
	XmlClassItem sourceData,
	XmlClassItem targetData,
	SchemaVersionInfo sourceSchema,
	SchemaVersionInfo targetSchema)
{
	if (sourceData == null || targetData == null) return;

	var sourceMembers = sourceData.members.ToDictionary(item => item.name);
	var targetMembers = targetData.members.ToDictionary(item => item.name);

	foreach (var member in sourceMembers.Values)
	{
		var propertyName = Utils.PropertyName(member.name);
		if (!targetMembers.TryGetValue(member.name, out var targetMember)) 
		{
			WriteLine($"/// property was removed - {sourceName}.{propertyName};");
			continue;
		}

		targetMembers.Remove(member.name);

		if (!Helpers.AreEqual(member, targetMember))
		{
			WriteLine($"/// type was changed - {propertyName};");
			continue;
		}

		if (BuilderContext.AreVersionsEqual(member, targetMember, sourceSchema, targetSchema))
			continue;

		if (targetSchema.HasClass(member.type))
		{
			WriteXmlComments($"{sourceName}.{propertyName}", $"{targetName}.{propertyName}",
				sourceSchema.GetObject(member.type), targetSchema.GetObject(member.type), sourceSchema, targetSchema);
			continue;
		}

		WriteLine($"/// copy {sourceName}.{propertyName} to {targetName}.{propertyName};");
	}

	foreach (var member in targetMembers.Values)
	{
		var propertyName = Utils.PropertyName(member.name);
		WriteLine($"/// property was added - {targetName}.{propertyName};");
	}
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class SessionLoaderTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
